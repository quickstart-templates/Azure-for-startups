{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.12.40.16777",
      "templateHash": "9479013125453866133"
    }
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "metadata": {
        "description": "リソース名に付与する識別用の文字列（プロジェクト名など）を入力してください"
      }
    },
    "iotHubSkuCode": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3"
      ],
      "metadata": {
        "description": "Azure IoT Hub のプランを選択してください"
      }
    },
    "storageAccountSkuCodeStreamAnalytics": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_GRS",
        "Standard_GZRS",
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_RAGZRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Azure Stream Analytics 用の Azure Storage Account の SKU を選択してください"
      }
    },
    "storageAccountSkuCodeSynapse": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GRS",
        "Standard_GZRS",
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_RAGZRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Azure Synapse Analytics 用の Azure Storage Account の SKU を選択してください"
      }
    },
    "sqlDatabaseCollation": {
      "type": "string",
      "defaultValue": "Japanese_CI_AS",
      "metadata": {
        "description": "Azure SQL Database の照合順序を選択してください"
      }
    }
  },
  "variables": {
    "resourceGroupLocation": "[resourceGroup().location]",
    "synapseAnalyticsWorkspaceName": "[format('synw-{0}', parameters('workloadName'))]",
    "streamAnalyticsInputName": "iothub",
    "iotHubConsumerGroupStreamAnalytics": "stream-analytics"
  },
  "resources": [
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2022-04-30-preview",
      "name": "[format('iot-{0}', parameters('workloadName'))]",
      "location": "[variables('resourceGroupLocation')]",
      "sku": {
        "name": "[parameters('iotHubSkuCode')]",
        "capacity": 1
      },
      "properties": {
        "routing": {
          "routes": [
            {
              "name": "default",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "events"
              ],
              "isEnabled": true
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
      "apiVersion": "2022-04-30-preview",
      "name": "[format('{0}/events/{1}', format('iot-{0}', parameters('workloadName')), variables('iotHubConsumerGroupStreamAnalytics'))]",
      "properties": {
        "name": "[variables('iotHubConsumerGroupStreamAnalytics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', format('iot-{0}', parameters('workloadName')))]"
      ]
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('asa-{0}', parameters('workloadName'))]",
      "location": "[variables('resourceGroupLocation')]",
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "jobType": "Cloud",
        "transformation": {
          "name": "Transformation",
          "properties": {
            "query": "[format('SELECT * INTO [syanapse] FROM [{0}]', variables('streamAnalyticsInputName'))]"
          }
        },
        "jobStorageAccount": {
          "authenticationMode": "Msi",
          "accountName": "[format('st{0}', uniqueString(resourceGroup().id, 'stream-analytics'))]"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', uniqueString(resourceGroup().id, 'stream-analytics')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[format('st{0}', uniqueString(resourceGroup().id, 'stream-analytics'))]",
      "location": "[variables('resourceGroupLocation')]",
      "sku": {
        "name": "[parameters('storageAccountSkuCodeStreamAnalytics')]"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "isHnsEnabled": true,
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/{1}', format('asa-{0}', parameters('workloadName')), variables('streamAnalyticsInputName'))]",
      "properties": {
        "type": "Stream",
        "datasource": {
          "type": "Microsoft.Devices/IotHubs",
          "properties": {
            "iotHubNamespace": "[format('iot-{0}', parameters('workloadName'))]",
            "sharedAccessPolicyName": "service",
            "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IoTHubs/IoTHubKeys', format('iot-{0}', parameters('workloadName')), 'service'), '2022-04-30-preview').primaryKey]",
            "endpoint": "messages/events",
            "consumerGroupName": "[variables('iotHubConsumerGroupStreamAnalytics')]"
          }
        },
        "serialization": {
          "type": "Json",
          "properties": {
            "encoding": "UTF8"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', format('iot-{0}', parameters('workloadName')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('asa-{0}', parameters('workloadName')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[format('st{0}', uniqueString(resourceGroup().id, 'synapse'))]",
      "location": "[variables('resourceGroupLocation')]",
      "sku": {
        "name": "[parameters('storageAccountSkuCodeSynapse')]"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "isHnsEnabled": true,
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices",
          "resourceAccessRules": [
            {
              "tenantId": "[subscription().tenantId]",
              "resourceId": "[resourceId('Microsoft.Synapse/workspaces', variables('synapseAnalyticsWorkspaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', format('st{0}', uniqueString(resourceGroup().id, 'synapse')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', uniqueString(resourceGroup().id, 'synapse')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}/{2}', format('st{0}', uniqueString(resourceGroup().id, 'synapse')), 'default', 'data')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('st{0}', uniqueString(resourceGroup().id, 'synapse')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('synapseAnalyticsWorkspaceName')]",
      "location": "[variables('resourceGroupLocation')]",
      "properties": {
        "defaultDataLakeStorage": {
          "resourceId": "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', uniqueString(resourceGroup().id, 'synapse')))]",
          "accountUrl": "[format('https://{0}.dfs.{1}', format('st{0}', uniqueString(resourceGroup().id, 'synapse')), environment().suffixes.storage)]",
          "filesystem": "data"
        },
        "trustedServiceBypassEnabled": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}', uniqueString(resourceGroup().id, 'synapse')))]"
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces/azureADOnlyAuthentications",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('synapseAnalyticsWorkspaceName'), 'default')]",
      "properties": {
        "azureADOnlyAuthentication": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', variables('synapseAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces/firewallRules",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('synapseAnalyticsWorkspaceName'), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', variables('synapseAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces/sqlPools",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('synapseAnalyticsWorkspaceName'), format('syndp{0}', join(split(parameters('workloadName'), '-'), '')))]",
      "location": "[variables('resourceGroupLocation')]",
      "sku": {
        "name": "DW100c"
      },
      "properties": {
        "collation": "[parameters('sqlDatabaseCollation')]",
        "storageAccountType": "LRS"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', variables('synapseAnalyticsWorkspaceName'))]"
      ]
    }
  ]
}